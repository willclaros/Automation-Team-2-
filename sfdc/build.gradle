import net.masterthought.cucumber.Configuration
import net.masterthought.cucumber.ReportBuilder
import com.google.gson.JsonArray
import com.google.gson.JsonObject
import com.google.gson.JsonParser


group 'jalasoft'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'

sourceCompatibility = 1.8

checkstyle {
    toolVersion = '8.9'
}

repositories {
    jcenter()
}

buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.bodar.com'
        }
    }
    dependencies {
        classpath 'net.masterthought:cucumber-reporting:3.19.0'
        classpath 'com.google.code.gson:gson:2.8.5'
//        classpath 'net.masterthought:cucumber-reporting:0.1.0'
    }
}

dependencies {
    compile project(':coreui')
    compile project(':coreapi')
    testCompile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-picocontainer', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-testng', version: '1.2.5'
//    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.4.0'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '1.7.2'
}

// Task to define arguments and configurations to properties file
tasks.withType(Test) {

    // enable TestNG support (default is JUnit)
    useTestNG()

    testLogging.showStandardStreams = true

    // set JVM arguments for the features.test JVM(s)
    scanForTestClasses = false

    //turn off Gradle's HTML report to avoid replacing the reports generated by TestNG library:
    reports.html.enabled = true

    ignoreFailures = false

    // Define the custom properties to run the regression
    systemProperty "browser", browser
    systemProperty "server", server
    systemProperty "skin", skin
}

//Define project properties
project.ext {

    // Properties to generate reports
    firstRunReportFolder = "build/cucumber/reports"
    firstRunJsonPath = "build/cucumber/cucumber.json"
    secondRunReportFolder = "build/cucumber/retry/reports"
    secondRunJsonPath = "build/cucumber/retry/cucumber.json"
    mergedRunReportFolder = "build/cucumber/merged/reports"
    mergedRunJsonPath = "build/cucumber/merged/cucumber.json"
}

// Task with configuration to execute the features
task executeFeatures(type: Test) {
    options {
        useDefaultListeners = false
        jvmArgs = ['-Dcucumber.options= ' +
                           '--glue com.jalasoft.sfdc ' +
                           '--plugin pretty ' +
                           '--plugin json:build/cucumber/cucumberMerged.json ' +
                           '--plugin rerun:build/cucumber/rerun.txt ' +
                           'classpath:' + featureFolders + ' ' +
                           cucumberOptions]
    }

    doLast {
        generateReport(project.firstRunJsonPath, project.firstRunReportFolder)
    }
}

task reExecuteFeatures(type: Test) {
    File failedScenariosFile = new File('build/cucumber/rerun.txt')
    if (failedScenariosFile.exists() && !failedScenariosFile.getText().isEmpty()) {
        options {
            useDefaultListeners = false
            jvmArgs = ['-Dcucumber.options=@build/cucumber/rerun.txt ' +
                               '--glue com.jalasoft.sfdc ' +
                               '--plugin pretty ' +
                               '--plugin json:build/cucumber/retry/cucumber.json ' +
                               '--plugin rerun:build/cucumber/retry/rerun.txt ' +
                               cucumberOptions]
        }
    }

    doLast {
        generateReport(project.secondRunJsonPath, project.secondRunReportFolder)
    }
}

task generateMergedReport {

    // Verify if there is a First Run json file
    File firstRunFile = file(project.firstRunJsonPath)
    if (firstRunFile.exists() && firstRunFile.length() != 0) {
        JsonParser parser = new JsonParser()

        //first run json path is the final project by default
        String finalRunJsonPath = project.firstRunJsonPath

        // Load cucumber.json file from the First Run
        FileReader firstRunCucumberFile = new FileReader(project.firstRunJsonPath)
        JsonArray firstRunCucumberJsonArray = (JsonArray) parser.parse(firstRunCucumberFile)

        // Verify if there is a Second Run json file to merge the First Run json file
        File secondRunFile = file(project.secondRunJsonPath)
        if (secondRunFile.exists() && secondRunFile.length() != 0) {

            //the final run json path will be the merged run json path
            finalRunJsonPath = project.mergedRunJsonPath

            // Load cucumber.json file from the Second Run
            FileReader secondRunCucumberFile = new FileReader(project.secondRunJsonPath)
            JsonArray secondRunCucumberJsonArray = (JsonArray) parser.parse(secondRunCucumberFile)

            //Instance the final json and scenarios arrays
            JsonArray finalRunCucumberJsonArray = new JsonArray()
            JsonArray finalRunScenariosArray = new JsonArray()

            // Iterate features
            for (int i = 0; i < firstRunCucumberJsonArray.size(); i++) {
                JsonObject firstRunFeatureJson = (JsonObject) firstRunCucumberJsonArray.get(i)

                // Iterate re-executed features
                for (int k = 0; k < secondRunCucumberJsonArray.size(); k++) {
                    JsonObject secondRunFeatureJson = (JsonObject) secondRunCucumberJsonArray.get(k)
                    finalRunScenariosArray = new JsonArray()

                    // Check if the feature was re-executed
                    if (firstRunFeatureJson.get("name").equals(secondRunFeatureJson.get("name"))) {

                        // Iterate scenarios
                        JsonArray firstRunScenariosArray = firstRunFeatureJson.getAsJsonArray("elements")

                        for (int j = 0; j < firstRunScenariosArray.size(); j++) {
                            JsonObject firstRunScenarioJson = firstRunScenariosArray.get(j).getAsJsonObject()

                            // Iterate re-executed scenarios
                            JsonArray SecondRunScenariosArray = secondRunFeatureJson.getAsJsonArray("elements")

                            for (int l = 0; l < SecondRunScenariosArray.size(); l++) {
                                JsonObject secondRunscenarioJson = SecondRunScenariosArray.get(l).getAsJsonObject()

                                // Check if the scenario was re-executed
                                if (firstRunScenarioJson.get("name").equals(secondRunscenarioJson.get("name")) &&
                                        firstRunScenarioJson.get("line").equals(secondRunscenarioJson.get("line"))) {

                                    // Overwrite scenario with the re-executed scenario
                                    firstRunScenarioJson = secondRunscenarioJson;
                                    break
                                }
                            }
                            finalRunScenariosArray.add(firstRunScenarioJson)
                        }

                        // Overwrite merged scenarios
                        firstRunFeatureJson.add("elements", finalRunScenariosArray)
                        break
                    }
                }

                // Add merged feature
                finalRunCucumberJsonArray.add(firstRunFeatureJson)
            }

            // Write the new Json file
            writeTextIntoFile(finalRunCucumberJsonArray.toString(), project.mergedRunJsonPath, project.mergedRunReportFolder)
        }

        // Generate the report
        generateReport(finalRunJsonPath, project.mergedRunReportFolder)
    }
}

//Code for 3.13.0 report
def generateReport(String pathCucumber, String pathReport) {
    File jsonFile = new File(pathCucumber)
    if (jsonFile.exists()) {
        File reportOutputDirectory = new File(pathReport)
        List<String> jsonReportFiles = new ArrayList<>()
        jsonReportFiles.add(pathCucumber)
        String buildProjectName = 'SFDC Automation'
//        Configuration configuration = new Configuration(reportOutputDirectory, buildProjectName)
//        ReportBuilder reportBuilder = new ReportBuilder(jsonReportFiles, configuration)
//        reportBuilder.generateReports()
    }
}

/**
 * Create a file with a specific text.
 * @param textFile - contains the text that will be into the file.
 * @param filePath - is the file path to be created.
 * @return
 * @throws IOException Exception
 */
def writeTextIntoFile(String textFile, String filePath, String folderPath) throws IOException {

    // Create folder to write the file if it does not exist
    File folder = new File(folderPath)
    folder.mkdirs()

    FileWriter fileWriter = new FileWriter(filePath)
    fileWriter.write(textFile)
    fileWriter.close()
}